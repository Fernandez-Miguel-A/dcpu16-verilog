{"name":"DCPU-16","body":"This is a hardware implementation of the DCPU-16 cpu designed by @notch for his new game 0x10c. \r\n\r\nIt is written entirely in RTL Verilog and is fully synthesisable. While basically functional, there is still plenty of room for improvement.\r\n\r\n## Pipeline\r\n\r\nThe DCPU16 is designed with a single-issue 8-stage integer pipeline with a maximum speed of 1-clock cycle per stage. It takes at least 8-clock cycles to complete a single instruction and this is split into two stages of 4-clock cycles each. \r\n\r\nAs a result, the maximum effective instruction rate is 4-clock cycles per instruction.\r\n\r\n* Fetch (FE) - fetches the instruction.\r\n* Decode (DE) - decodes the instruction.\r\n* Address A (EA) - calculates the effective address for operand A.\r\n* Address B (EB) - calculates the effective address for operand B.\r\n* Load A (LA) - loads the operand A.\r\n* Load B (LB) - loads the operand B.\r\n* Execute (EX) - executes the operation.\r\n* Save A (SA) - saves the result back to A.\r\n\r\n## Testing\r\n\r\n**Caveat Emptor!**\r\n\r\nIt's only been tested with the sample programme provided in the official DCPU-16 documentation. This is found in the dump.vmem file, with a single re-ordering of instruction to avoid some data hazards.\r\n\r\nIt works. \r\n\r\nHowever, there are very likely to be bugs in the code. If you spot any, feel free to fix it and send me a pull request.\r\n\r\nSpecifically, test out all the addressing modes before use!\r\n\r\n## Simulation\r\n\r\nYou can simulate the files using Icarus Verilog. You should also install gtkwave as a waveform viewer, unless you already have something else to use.\r\n\r\nIf you do not have any of it installed, you will need to do that first. To do this in Ubuntu, simply issue:\r\n\r\n    $ sudo apt-get -y install iverilog gtkwave\r\n\r\nTo simulate the DCPU16 RTL code, do the following from within the project directory.\r\n\r\n    $ cd sim/\r\n    $ ./iversim verilog/dcpu16_sim.v\r\n\r\n    VCD info: dumpfile dump.vcd opened for output.\r\n    WARNING: /tmp/tmp.hVTa15LVC0/sim.v:1002: $readmemh: Standard inconsistency, following 1364-2005.\r\n\r\n    *** TIMEOUT       5050 ***\r\n\r\n    Converting VCD File 'dump.vcd' to LXT file 'dump.lxt'...\r\n\r\n    145 symbols span ID range of 220, using indexing...\r\n    [0] start time.\r\n    [5050] end time.\r\n    \r\n    [0] total facilities: [0] facilities defined, [0] facilities undefined.\r\n\r\n\r\nThis will dump out a LXT file that you can view with gtkwave:\r\n\r\n    $ gtkwave dump.lxt\r\n\r\nThat's it! \r\n\r\nHave fun hacking!","tagline":"Pipelined DCPU-16 Verilog Implementation","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}